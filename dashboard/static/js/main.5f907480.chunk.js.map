{"version":3,"sources":["Settings-01.svg","config.js","redux/states.js","redux/mainReducer.js","redux/reducer.js","redux/constants.js","redux/store.js","redux/actions.js","dashboard/overlay/Settings.js","HttpService.js","dashboard/header/Header.js","dashboard/body/inputs/Tag.js","dashboard/body/inputs/Selector.js","dashboard/body/inputs/HtmlInput.js","dashboard/body/displays/RuleList.js","dashboard/body/inputs/Links.js","dashboard/body/Body.js","RuleFormatter.js","dashboard/footer/CodeEditor.js","dashboard/footer/HtmlDisplay.js","dashboard/footer/Footer.js","dashboard/overlay/Notification.js","dashboard/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","awaitingServerResponse","alertMessage","currentLanguage","currentEditorToken","currentEditorValue","currentRule","id","tag","selector","html","links","currentRuleType","rules","settings","display","user","email","addRuleToState","state","newRule","newRuleList","slice","newRuleIndex","length","console","error","addRuleToList","payload","push","sort","rule1","rule2","tagA","tagB","mainReducer","action","type","newState","Object","assign","splice","store","createStore","rootReducer","updateStoreRuleList","updateStoreRule","rule","addStoreRule","removeStoreRule","index","updateAlertMessage","msg","Settings","props","closeSettings","dispatch","updateOldPassword","e","setState","oldPassword","target","value","updateNewPassword","newPassword","changePassword","RegExp","test","passwordMessage","axios","post","config","Promise","reject","then","result","catch","err","response","data","logout","get","log","window","location","href","style","this","subscribed","subscribe","getState","unsubscribe","className","onClick","onChange","React","Component","Header","toggleSettings","changeLanguage","event","styles","token","regex","selectRuleStyle","updateStoreRuleType","newStyles","keys","forEach","src","settingSvg","alt","Tag","updateTag","preventDefault","Selector","updateSelector","updateRegexSelector","updateTokenTypeSelector","tokenType","renderSelectorInput","ruleType","placeholder","editorToken","HtmlInput","updateHtml","rows","RuleList","toggleRuleClass","newValue","classList","newClassList","map","el","currentIndex","selectRule","ruleClicked","contains","removeRule","handleKeyEvent","lambda","key","newIndex","renderDeleteIcon","Array","apply","onKeyDown","tabIndex","Links","updateLinks","disabled","Body","getRulesFromServer","lang","resp","newRules","_id","pretty","toString","HttpService","formatToken","renderRuleList","connect","updateStoreTag","updateStoreHtml","updateStoreLinks","ruleId","ruleIndex","confirm","delete","CodeEditor","markEditorFromArray","toMark","clearEditorMarks","range","markers","Editor","current","editor","session","addMarker","removeMarker","markFromTokens","externalToken","externalTokenSplit","split","lines","doc","$lines","i","line","previousIndex","getTokens","tolk","startIndex","indexOf","Range","markFromRegex","createRef","self","on","requiredUselessParam","pos","$pos","getTokenAt","row","column","onTokenSelect","ref","mode","theme","onEditorValueChange","width","height","hljs","registerLanguage","javascript","HtmlDisplay","updateHighlighting","querySelectorAll","block","highlightBlock","getHtml","sanitizeHtml","allowedTags","defaults","concat","replace","__html","dangerouslySetInnerHTML","Footer","saveRule","editorValue","updateEditorToken","updateEditorValue","formattedRule","hasOwnProperty","tokenValue","Error","RuleFormatter","put","status","saveTokenRule","saveRegexRule","Notification","setTimeout","Main","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5f907480.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Settings-01.b05db462.svg\";","export default {\n  SERVER_URL: `http://localhost:8080`\n}","const initialState = {\n  awaitingServerResponse: false,\n  alertMessage: '',\n  currentLanguage: 'javascript',\n  currentEditorToken: null,\n  currentEditorValue: `\n// Insert your code here\n`,\n  currentRule: {\n    id: '',\n    tag: '',\n    selector: '',\n    html: ``,\n    links: []\n  },\n  currentRuleType: 'token',\n  rules: [],\n  settings: {\n    display: false,\n  },\n  user: {\n    email: 'asdf@asdf.com'\n  }\n};\n\nexport default initialState;","import {\n  UPDATE_TAG,\n  UPDATE_SELECTOR,\n  UPDATE_HTML,\n  UPDATE_LINKS,\n  UPDATE_EDITOR_TOKEN,\n  UPDATE_RULE_LIST,\n  UPDATE_RULE,\n  SELECT_RULE,\n  FETCH_FROM_SERVER,\n  REMOVE_RULE,\n  UPDATE_ALERT_MESSAGE,\n  ADD_RULE,\n  UPDATE_EDITOR_VALUE,\n  UPDATE_RULE_TYPE,\n  TOGGLE_SETTINGS_DISPLAY\n} from './constants'\n\nimport initialState from './states';\n\nfunction mainReducer(state = initialState, action) {\n  switch (action.type) {\n\n    case FETCH_FROM_SERVER:\n      return {\n        ...state,\n        awaitingServerResponse: true,\n      }\n\n    case UPDATE_ALERT_MESSAGE:\n      return {\n        ...state,\n        awaitingServerResponse: false,\n        alertMessage: action.payload,\n      }\n\n    case UPDATE_TAG:\n      return {\n        ...state,\n        currentRule: {\n          ...state.currentRule,\n          tag: action.payload\n        }\n      }\n\n    case UPDATE_SELECTOR:\n      return {\n        ...state,\n        currentRule: {\n          ...state.currentRule,\n          selector: action.payload\n        }\n      }\n\n    case UPDATE_HTML:\n      return {\n        ...state,\n        currentRule: {\n          ...state.currentRule,\n          html: action.payload\n        }\n      }\n\n    case UPDATE_LINKS:\n      return {\n        ...state,\n        currentRule: {\n          ...state.currentRule,\n          links: action.payload\n        }\n      }\n\n    case UPDATE_EDITOR_TOKEN:\n      return {\n        ...state,\n        currentEditorToken: action.payload\n      }\n\n    case UPDATE_EDITOR_VALUE:\n      return {\n        ...state,\n        currentEditorValue: action.payload\n      }\n\n    case UPDATE_RULE_LIST:\n      return {\n        ...state,\n        rules: action.payload\n      }\n\n    case UPDATE_RULE:\n      return addRuleToState(state, action.payload);\n\n    case ADD_RULE:\n      return addRuleToList(state, action.payload);\n\n\n    case SELECT_RULE:\n      return {\n        ...state,\n        currentRule: action.payload\n      }\n\n    case REMOVE_RULE:\n      let newState = Object.assign({}, state);\n      newState.rules.splice(action.payload, 1);\n      newState.currentRule = initialState.currentRule;\n      return newState;\n\n    case UPDATE_RULE_TYPE:\n      return {\n        ...state,\n        currentRule: initialState.currentRule,\n        currentRuleType: action.payload,\n      }\n\n    case TOGGLE_SETTINGS_DISPLAY:\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          display: !state.settings.display,\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nfunction addRuleToState(state, newRule) {\n  let newRuleList = state.rules.slice();\n  let newRuleIndex = 0;\n  // Yes, I know that I could use 'find' here, but I was having issues with it\n  //  and time is money, so just get what works.\n  while (newRuleList[newRuleIndex].id !== newRule.id) {\n    newRuleIndex++;\n\n    // If we're out of bounds on the rule list, there's a serious problem...\n    if (newRuleIndex > newRuleList.length) {\n      console.error(`RULE DOES NOT EXIST IN STATE`);\n      return state;\n    }\n  }\n  newRuleList[newRuleIndex] = newRule;\n  return {\n    ...state,\n    rules: newRuleList,\n  }\n}\n\n// Adds a new rule to the list and then sorts it\nfunction addRuleToList(state, payload) {\n  let newRuleList = state.rules.slice();\n  // Add a new rule then sort the rules accordingly\n  newRuleList.push(payload);\n  newRuleList.sort(function (rule1, rule2) {\n    let tagA = rule1.tag;\n    let tagB = rule2.tag;\n    if (tagA < tagB) {\n      return -1;\n    }\n    else if (tagA > tagB) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  // Don't forget to set the new id to the state\n  return {\n    ...state,\n    currentRule: {\n      ...state.currentRule,\n      id: payload.id,\n    },\n    rules: newRuleList,\n  };\n}\n\nexport default mainReducer;","// import { combineReducers } from 'redux';\nimport mainReducer from './mainReducer';\n// import asyncReducer from './asyncReducer'\n\n// export default combineReducers({\n//   mainReducer,\n//   asyncReducer\n// });\n\nexport default mainReducer;","// Current Rule Operations\nexport const UPDATE_TAG = 'UPDATE_TAG';\nexport const UPDATE_SELECTOR = 'UPDATE_SELECTOR';\nexport const UPDATE_HTML = 'UPDATE_HTML';\nexport const UPDATE_LINKS = 'UPDATE_LINKS';\n\n// Rule List Operations\nexport const UPDATE_RULE_LIST = 'UPDATE_RULE_LIST';\nexport const UPDATE_RULE = 'UPDATE_RULE';\nexport const ADD_RULE = 'ADD_RULE';\nexport const SELECT_RULE = 'SELECT_RULE';\nexport const REMOVE_RULE = 'REMOVE_RULE';\nexport const UPDATE_RULE_TYPE = 'UPDATE_RULE_TYPE';\n\n// Editor Operations\nexport const UPDATE_EDITOR_TOKEN = 'UPDATE_EDITOR_TOKEN';\nexport const UPDATE_EDITOR_VALUE = 'UPDATE_EDITOR_VALUE';\n\n// Settings Operations\nexport const TOGGLE_SETTINGS_DISPLAY = 'TOGGLE_SETTINGS_DISPLAY';\n\n// External Event Operations\nexport const FETCH_FROM_SERVER = 'FETCH_FROM_SERVER';\nexport const UPDATE_ALERT_MESSAGE = 'UPDATE_ALERT_MESSAGE';","import { createStore } from 'redux';\nimport rootReducer from './reducer';\nimport initialState from './states';\n\nconst store = createStore(rootReducer, initialState);\n\nexport default store;","import {\n  UPDATE_TAG,\n  UPDATE_HTML,\n  UPDATE_LINKS,\n  UPDATE_RULE_LIST,\n  UPDATE_RULE,\n  SELECT_RULE,\n  REMOVE_RULE,\n\n  UPDATE_EDITOR_TOKEN,\n  UPDATE_EDITOR_VALUE,\n\n  FETCH_FROM_SERVER,\n  UPDATE_ALERT_MESSAGE,\n  ADD_RULE,\n  UPDATE_RULE_TYPE,\n  UPDATE_SELECTOR,\n\n  TOGGLE_SETTINGS_DISPLAY\n} from './constants'\n\n// Get and set the current rule tag\nexport const updateStoreTag = (tag) => {\n  return {\n    type: UPDATE_TAG,\n    payload: tag\n  }\n}\n\n// Get and set the current rule token\nexport const updateStoreupdateSelector = (token) => {\n  return {\n    type: UPDATE_SELECTOR,\n    payload: token\n  }\n}\n\n// Get and set the current rule html\nexport const updateStoreHtml = (html) => {\n  return {\n    type: UPDATE_HTML,\n    payload: html\n  }\n}\n\n// Get and set the current rule links\nexport const updateStoreLinks = (links) => {\n  return {\n    type: UPDATE_LINKS,\n    payload: links\n  }\n}\n\n// Get the list of rules\nexport const updateStoreRuleList = (rules) => {\n  return {\n    type: UPDATE_RULE_LIST,\n    payload: rules\n  }\n}\n\n// Update a single rule\nexport const updateStoreRule = (rule) => {\n  return {\n    type: UPDATE_RULE,\n    payload: rule,\n  }\n}\n\nexport const addStoreRule = (rule) => {\n  return {\n    type: ADD_RULE,\n    payload: rule,\n  }\n}\n\n// Sets the current rule\nexport const selectStoreRule = (rule) => {\n  return {\n    type: SELECT_RULE,\n    payload: rule\n  }\n}\n\n// Removes a rule from the list of rules\nexport const removeStoreRule = (index) => {\n  return {\n    type: REMOVE_RULE,\n    payload: index\n  }\n}\n\n// Updates the Rule type\nexport const updateStoreRuleType = (type) => {\n  return {\n    type: UPDATE_RULE_TYPE,\n    payload: type\n  }\n}\n\n// Get and set the editor token\nexport const updateEditorToken = (token) => {\n  return {\n    type: UPDATE_EDITOR_TOKEN,\n    payload: token\n  }\n}\n\n// Set the editor value\nexport const updateEditorValue = (value) => {\n  return {\n    type: UPDATE_EDITOR_VALUE,\n    payload: value\n  }\n}\n\n// Toggles the settings dispaly\nexport const toggleSettingsDisplay = () => { return { type: TOGGLE_SETTINGS_DISPLAY } };\n\n// Fetching something from the server\nexport const fetchFromServer = () => { return { type: FETCH_FROM_SERVER } };\nexport const updateAlertMessage = (msg) => {\n  return {\n    type: UPDATE_ALERT_MESSAGE,\n    payload: msg\n  }\n}","import React from 'react';\nimport './Settings.css';\n\nimport config from '../../config';\n\nimport store from '../../redux/store';\nimport { toggleSettingsDisplay, updateAlertMessage } from '../../redux/actions';\n\nimport * as HttpService from '../../HttpService';\n\nexport default class Settings extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      style: { display: 'none' },\n      passwordMessage: '',\n      oldPassword: '',\n      newPassword: '',\n    }\n  }\n\n  componentDidMount() {\n    this.subscribed = store.subscribe(() => {\n      this.setState({ style: { display: store.getState().settings.display ? 'flex' : 'none' } })\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.subscribed.unsubscribe) {\n      this.subscribed.unsubscribe();\n    }\n  }\n\n  closeSettings = () => {\n    store.dispatch(toggleSettingsDisplay());\n  }\n\n  updateOldPassword = (e) => {\n    this.setState({ oldPassword: e.target.value });\n  }\n\n  updateNewPassword = (e) => {\n    this.setState({ newPassword: e.target.value });\n  }\n\n  // Checks for a valid password, then changes it\n  changePassword = () => {\n    // Taken from https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/\n    var mediumRegex = new RegExp(\"^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})\");\n    if (mediumRegex.test(this.state.newPassword)) {\n      this.setState({ passwordMessage: '' });   // Incase we have a password message, remove it\n      HttpService.newPassword(this.props.user.email, this.state.newPassword, this.state.oldPassword)\n        .then(result => {\n\n          // If we're successful, alert the user\n          store.dispatch(updateAlertMessage('New Password Saved'));\n        })\n        .catch(err => {\n\n          // If we're unsuccessful, still alert the user\n          store.dispatch(updateAlertMessage('Error Saving New Password: ' + err.response.data));\n        })\n    } else {\n\n      // If we run into an invalid password\n      this.setState({ passwordMessage: 'Password must have all of the following: at least 8 characters long, contain one uppercase character, contain one lowercase character, contain a number, container a special character' })\n    }\n\n  }\n\n  // Tell the backend to log out.\n  logout = () => {\n    HttpService.logout(this.props.user.email)\n      .then(result => {\n        console.log(result);\n        window.location.href = `${config.SERVER_URL}/users/login`; // Once we've logged out, go to the login page\n      })\n      .catch(err => {\n        store.dispatch(updateAlertMessage('Error logging out: ' + err.response.data));\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"Settings\" style={this.state.style}>\n        <div className=\"center-piece\">\n          <div className=\"header\">\n            <p>{this.props.user.email}</p>\n            <p className=\"close-settings\" onClick={() => this.closeSettings()}>X</p>\n          </div>\n          <div className=\"password\">\n            <h3>Change Password</h3>\n            <label>Old Password</label>\n            <input type=\"password\" value={this.state.oldPassword} onChange={this.updateOldPassword} />\n            <label>New Password</label>\n            <input type=\"password\" value={this.state.newPassword} onChange={this.updateNewPassword} />\n            <p className=\"subnote\">{this.state.passwordMessage}</p>\n            <button onClick={() => this.changePassword()}>Change</button>\n          </div>\n          <button className=\"logout-btn\" onClick={() => this.logout()}>Logout</button>\n        </div>\n      </div>\n    );\n  }\n}","import axios from 'axios';\nimport config from './config';\n\n// Retrieves the server response for grabbing all the rules\nexport function getAllRules(lang) {\n  if (lang) {\n    return axios.get(`${config.SERVER_URL}/api/v1/${lang}`);\n  } else {\n    return Promise.reject(`No language provided.`);\n  }\n}\n\n// Retrieves the server response for grabbing all the rules\nexport function getAllTokenRules(lang) {\n  if (lang) {\n    return axios.get(`${config.SERVER_URL}/api/v1/token/${lang}`);\n  } else {\n    return Promise.reject(`No language provided.`);\n  }\n}\n\n// Retrieves the server response for grabbing all the rules\nexport function getAllRegexRules(lang) {\n  if (lang) {\n    return axios.get(`${config.SERVER_URL}/api/v1/regex/${lang}`);\n  } else {\n    return Promise.reject(`No language provided.`);\n  }\n}\n\n// Saves a particluar token rule object to the server\nexport function saveTokenRule(id, rule, lang) {\n  if (rule && id && lang) {\n    return axios.put(`${config.SERVER_URL}/api/v1/token/${lang}/${id}`, rule);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\n// Sends a new token rule to the server\nexport function saveNewTokenRule(rule, lang) {\n  if (rule && lang) {\n    return axios.post(`${config.SERVER_URL}/api/v1/token/${lang}`, rule);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\n// Sends a remove request to the server\nexport function deleteTokenRule(id, lang) {\n  if (id && lang) {\n    return axios.delete(`${config.SERVER_URL}/api/v1/token/${lang}/${id}`);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\n// Saves a particluar regex rule object to the server\nexport function saveRegexRule(id, rule, lang) {\n  if (rule && id && lang) {\n    return axios.put(`${config.SERVER_URL}/api/v1/regex/${lang}/${id}`, rule);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\n// Sends a new token rule to the server\nexport function saveNewRegexRule(rule, lang) {\n  if (rule && lang) {\n    return axios.post(`${config.SERVER_URL}/api/v1/regex/${lang}`, rule);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\n// Sends a remove request to the server\nexport function deleteRegexRule(id, lang) {\n  if (id && lang) {\n    return axios.delete(`${config.SERVER_URL}/api/v1/regex/${lang}/${id}`);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\n// Sends a new password\nexport function newPassword(email, newPassword, oldPassword) {\n  if (email && newPassword && oldPassword) {\n    return axios.post(`${config.SERVER_URL}/user/new-password`, { email, newPassword, oldPassword });\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}\n\nexport function logout(email) {\n  if (email) {\n    return axios.get(`${config.SERVER_URL}/user/logout`);\n  } else {\n    return Promise.reject(`Insificient Info Provided`);\n  }\n}","import React from 'react';\nimport './Header.css';\n\nimport store from '../../redux/store';\nimport { updateStoreRuleType, toggleSettingsDisplay } from '../../redux/actions';\n\nimport settingSvg from '../../Settings-01.svg'; // Settings Icon\n\nclass Header extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLanguage: 'javascript',\n      styles: {\n        token: 'selected',\n        regex: 'unselected'\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.selectRuleStyle(store.getState().currentRuleType);  // Match our current type on startup\n  }\n\n  toggleSettings = () => {\n    store.dispatch(toggleSettingsDisplay());\n  }\n\n  changeLanguage = (event) => {\n    this.setState({ currentLanguage: event.target.value });\n  }\n\n  // Sets all the other styles to 'unselected' while changing the style of the one to 'selected'\n  selectRuleStyle(type) {\n    store.dispatch(updateStoreRuleType(type));\n    if (this.state.styles[type] !== 'selected') {\n      let newStyles = Object.assign({}, this.state.styles);\n      Object.keys(newStyles).forEach(rule => {\n        if (rule === type) {\n          newStyles[rule] = 'selected';\n        }\n        else {\n          newStyles[rule] = 'unselected';\n        }\n      });\n      this.setState({ styles: newStyles });\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"Header\">\n        <img\n          src={settingSvg}\n          onClick={() => this.toggleSettings()}\n          className=\"settings\"\n          alt=\"Settings\" />\n        <div className=\"rule-types\">\n          <button onClick={() => this.selectRuleStyle('token')} className={this.state.styles.token}>TOKEN</button>\n          <button onClick={() => this.selectRuleStyle('regex')} className={this.state.styles.regex}>REGEX</button>\n        </div>\n        <select onChange={this.changeLanguage} value={this.state.currentLanguage}>\n          <option value=\"javascript\">javascript</option>\n        </select>\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './Tag.css';\n\nexport default class Tag extends React.Component {\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  updateTag = (event) => {\n    event.preventDefault();\n    let value = event.target.value;\n    this.props.updateTag(value);\n  }\n\n  render() {\n    return (\n      <div className=\"Tag input-field\">\n        <label className=\"tag-label\">Tag</label>\n        <input\n          className=\"tag-input\"\n          value={this.props.value}\n          onChange={this.updateTag} />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './Selector.css';\n\nexport default class Selector extends React.Component {\n\n  // Updates the selector if a token\n  updateSelector = (event) => {\n    event.preventDefault();\n    let value = event.target.value;\n    this.props.updateSelector(value);\n  }\n\n  updateRegexSelector = (event) => {\n    event.preventDefault();\n    let value = event.target.value;\n    let selector = Object.assign({}, this.props.value);\n    selector.regex = value;\n    this.props.updateSelector(selector);\n  }\n\n  updateTokenTypeSelector = (event) => {\n    event.preventDefault();\n    let value = event.target.value;\n    let selector = Object.assign({}, this.props.value);\n    selector.tokenType = value;\n    this.props.updateSelector(selector);\n  }\n\n  renderSelectorInput = () => {\n    if (this.props.ruleType === 'token') {\n      return <div className=\"selector-input\">\n        <input\n          className=\"selector-input-token\"\n          value={this.props.value}\n          placeholder=\"tokenType:tokenValue\"\n          onChange={this.updateSelector} />\n      </div>\n    } else {\n      let selector = Object.assign({}, this.props.value);\n      let { regex, tokenType } = selector;\n      return <div className=\"selector-input\">\n        <input\n          className=\"selector-input-regex\"\n          value={regex || ''}\n          placeholder=\"regex\"\n          onChange={this.updateRegexSelector} />\n        <input\n          className=\"selector-input-token-type\"\n          value={tokenType || ''}\n          placeholder=\"tokenType\"\n          onChange={this.updateTokenTypeSelector} />\n      </div>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Selector input-field\">\n        <div className=\"selector-header display-header\">\n          <label className=\"selector-label\">\n            {this.props.ruleType === 'token' ? 'Token' : 'Regex'}\n          </label>\n          <p className=\"subnote\">{this.props.editorToken ? this.props.editorToken : ''}</p>\n        </div>\n        {this.renderSelectorInput()}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './HtmlInput.css';\n\nexport default class HtmlInput extends React.Component {\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  updateHtml = (event) => {\n    event.preventDefault();\n    let value = event.target.value;\n    this.props.updateHtml(value);\n  }\n\n  render() {\n    return (\n      <div className=\"HtmlInput input-field\">\n        <div className=\"htmlInput-header display-header\">\n          <label className=\"htmlInput-label\">HTML</label>\n          <p className=\"subnote\">Click here to read HTML guidelines.</p>\n        </div>\n        <textarea\n          className=\"htmlInput-textarea\"\n          rows=\"5\"\n          value={this.props.value}\n          onChange={this.updateHtml}></textarea>\n      </div >\n    )\n  }\n}\n","import React from 'react';\nimport './RuleList.css';\n\nimport state from '../../../redux/states';\n\nexport default class RuleList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentIndex: -1,\n      classList: []\n    }\n  }\n\n  componentDidUpdate() {\n    // Once we get the list of rules (if we have them...), then update the 'classList' of unselected values\n    if (this.props.value.length > 0 && this.state.classList.length === 0) {\n      this.setState({\n        classList: Array.apply(null, Array(this.props.value.length)).map(el => 'unselected')\n      });\n    }\n  }\n\n  // Sets all the other classes to 'unselected' and toggles the one back and forth via the component state\n  toggleRuleClass = (index) => {\n    let newValue = this.state.classList[index] === 'unselected' ? 'selected' : 'unselected';\n    let newClassList = this.state.classList.map(el => 'unselected');\n    newClassList[index] = newValue;\n    this.setState({ currentIndex: index, classList: newClassList });\n  }\n\n  selectRule = (index) => {\n    if (this.state.classList[index] === 'unselected') {\n      this.props.selectRule(this.props.value[index]);\n    } else {\n      this.props.selectRule(state.currentRule);\n    }\n    this.toggleRuleClass(index);\n  }\n\n  // Select a rule and update the state with that rule\n  ruleClicked = (event, index) => {\n\n    // If we're hitting the 'X' then remove the rule accordingly\n    if (event.target.classList && event.target.classList.contains(`remove-rule`)) {\n      this.props.removeRule(index);\n    } else {\n      this.selectRule(index);\n    }\n  }\n\n  // When press \"UP\" or \"DOWN\" we move through the rules\n  handleKeyEvent = (event) => {\n    event.preventDefault();\n    let lambda = 0;   // How we're changing the index\n    if (event.key === 'ArrowDown') {\n      lambda = 1;\n    } else if (event.key === 'ArrowUp') {\n      lambda = -1;\n    }\n\n    // Set the new index according to the lambda (range check)\n    let newIndex = this.state.currentIndex;\n    if (lambda + newIndex < this.state.classList.length\n      && lambda + newIndex >= 0) {\n      newIndex += lambda;\n    } else {\n      return;   // If we're gonna go out of bounds, do nothing\n    }\n\n    this.selectRule(newIndex);\n  }\n\n  // Puts an delete icon which the given selected rule;\n  renderDeleteIcon = (value) => {\n    if (value) {\n      return <span className=\"remove-rule\">X</span>\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"RuleList\" onKeyDown={this.handleKeyEvent} tabIndex=\"0\">\n        {this.props.value.map((rule, index) =>\n          <div\n            className={this.state.classList[index]}\n            onClick={(event) => this.ruleClicked(event, index)}\n            key={rule.id}>\n            {rule.tag}\n            {this.renderDeleteIcon(this.state.classList[index] === `selected`)}\n          </div>\n        )}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './Links.css';\n\nexport default class Links extends React.Component {\n\n  // constructor(props) {\n  //   super(props)\n  // }\n\n  updateLinks = (event) => {\n    event.preventDefault();\n    let value = event.target.value;\n    this.props.updateLinks(value);\n  }\n\n  render() {\n    return (\n      <div className=\"Links\">\n        <div className=\"links-header display-header\">\n          <label className=\"links-label\">Links</label>\n          <p className=\"subnote\">Links seperated by commas</p>\n        </div>\n        <input\n          disabled\n          type=\"text\"\n          className=\"links-input\"\n          value={this.props.value}\n          onChange={this.updateLinks} />\n      </div>\n    )\n  }\n\n}","import React from 'react';\nimport './Body.css';\n\n// Left Side (top to bottom, left to right)\nimport Tag from './inputs/Tag';\nimport Selector from './inputs/Selector';\nimport HtmlInputs from './inputs/HtmlInput';\n\n// Right side (top to bottom, left to right)\nimport RuleList from './displays/RuleList';\nimport Links from './inputs/Links';\n\n// Networking and Formatting\nimport * as HttpService from '../../HttpService';\nimport * as RuleFormatter from '../../RuleFormatter';\n\n// Redux stuff\nimport store from '../../redux/store';\nimport {\n  updateStoreRuleList,\n  removeStoreRule,\n  fetchFromServer,\n  updateAlertMessage,\n} from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport {\n  updateStoreTag,\n  updateStoreupdateSelector,\n  updateStoreHtml,\n  updateStoreLinks,\n  selectStoreRule,\n} from '../../redux/actions';\n\nclass Body extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.currentRuleType = '';\n  }\n\n  componentDidMount() {\n    // When we start up, we want to grab the rules from the server\n    this.getRulesFromServer(this.props.ruleType);\n  }\n\n  componentDidUpdate() {\n    // If the rule type changes, then we need to get the new rules from the server\n    if (this.currentRuleType !== this.props.ruleType) {\n      this.getRulesFromServer(this.props.ruleType);\n      this.currentRuleType = this.props.ruleType;\n    }\n  }\n\n  getRulesFromServer = (ruleType) => {\n    store.dispatch(fetchFromServer());  // Sets the status that we're 'retrieving'\n    if (ruleType === 'token') {\n      HttpService.getAllTokenRules(store.getState().currentLanguage)\n        .then(resp => {\n          // Once you have the rules, format them, and update them to the store\n          let newRules = RuleFormatter.formatTokenRulesFromServer(resp.data);\n          store.dispatch(updateStoreRuleList(newRules));\n          store.dispatch(updateAlertMessage(``));\n        })\n        .catch(err => {\n          // Stick the error into the store if we fail\n          store.dispatch(updateAlertMessage(err.toString()));\n        });\n    }\n    else if (ruleType === 'regex') {\n      HttpService.getAllRegexRules(store.getState().currentLanguage)\n        .then(resp => {\n          let newRules = RuleFormatter.formatRegexRulesFromServer(resp.data);\n          store.dispatch(updateStoreRuleList(newRules));\n          store.dispatch(updateAlertMessage(``));\n        })\n        .catch(err => {\n          // Stick the error into the store if we fail\n          store.dispatch(updateAlertMessage(err.toString()));\n        });\n    }\n  }\n\n  // Formats a token to make it more presentable for the display\n  formatToken = (token) => {\n    if (token) {\n      return `{ type: '${token.type}', value: '${token.value}' }`\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Body\">\n        <div className=\"left\">\n          <Tag value={this.props.tag} updateTag={this.props.updateTag} />\n          <Selector\n            value={this.props.selector}\n            editorToken={this.formatToken(this.props.editorToken)}\n            updateSelector={this.props.updateSelector}\n            ruleType={this.props.ruleType} />\n          <HtmlInputs value={this.props.html} updateHtml={this.props.updateHtml} />\n        </div>\n        <div className=\"right\">\n          {this.renderRuleList}\n          <RuleList\n            value={this.props.rules}\n            selectRule={this.props.selectRule}\n            removeRule={this.props.removeRule} />\n          <Links value={this.props.links} updateLinks={this.props.updateLinks} />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Grab the props from the store\nconst mapStateToProps = (state) => {\n  return {\n    tag: state.currentRule.tag,\n    selector: state.currentRule.selector,\n    html: state.currentRule.html,\n    links: state.currentRule.links,\n    rules: state.rules,\n    editorToken: state.currentEditorToken,\n    ruleType: state.currentRuleType,\n    regex: state.currentRule.selector.regex ? state.currentRule.selector.regex : '',\n    tokenType: state.currentRule.selector.tokenType ? state.currentRule.selector.tokenType : '',\n  }\n}\n\n// Set the dispatch to the props\nconst matchDispatchToProps = (dispatch) => {\n  return {\n    updateTag: function (tag) {\n      dispatch(updateStoreTag(tag));\n    },\n    updateSelector: function (selector) {\n      dispatch(updateStoreupdateSelector(selector));\n    },\n    updateHtml: function (html) {\n      dispatch(updateStoreHtml(html));\n    },\n    updateLinks: function (links) {\n      dispatch(updateStoreLinks(links));\n    },\n    selectRule: function (ruleId) {\n      dispatch(selectStoreRule(ruleId));\n    },\n    removeRule: function (ruleIndex) {\n      // Get the rule from the store\n      let rule = store.getState().rules[ruleIndex];\n\n      // First confirm that this is what we want to do.\n      if (window.confirm(`Are you sure you want to delete the rule \"${rule.tag}\"?`)) {\n\n        // If we're dealing with tokens, delete the token rule. Otherwise, delete the regex rule\n        if (store.getState().currentRuleType === 'token') {\n          HttpService.deleteTokenRule(rule.id, store.getState().currentLanguage)\n            .then(() => {\n\n              // Once we're done with that, remove the index from the Rule List\n              store.dispatch(removeStoreRule(ruleIndex));\n              store.dispatch(updateAlertMessage(`Rule Deleted`));\n            })\n            .catch(err => store.dispatch(updateAlertMessage(err.toString())));\n        }\n        else if (store.getState().currentRuleType === 'regex') {\n          HttpService.deleteRegexRule(rule.id, store.getState().currentLanguage)\n            .then(() => {\n\n              // Once we're done with that, remove the index from the Rule List\n              store.dispatch(removeStoreRule(ruleIndex));\n              store.dispatch(updateAlertMessage(`Rule Deleted`));\n            })\n            .catch(err => store.dispatch(updateAlertMessage(err.toString())));\n        }\n      }\n    }\n  }\n}\n\n// Connect the props, and dispatches, to the store for this component\nexport default connect(mapStateToProps, matchDispatchToProps)(Body);","import pretty from 'pretty';\n\n// Takes a server response and formats the data to match the store\nexport function formatTokenRulesFromServer(rules) {\n  return rules.map(rule => {\n    return {        // Set the values from the server\n      id: rule._id,\n      tag: rule.tag,\n      selector: rule.token,\n      html: pretty(rule.html),  // This just makes the html a little nicer\n      links: rule.links,\n    }\n  }).sort(function (rule1, rule2) {   // Sort them alphabetically\n    let tagA = rule1.tag;\n    let tagB = rule2.tag;\n    if (tagA < tagB) {\n      return -1;\n    }\n    else if (tagA > tagB) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n}\n\n// Formats our objects to be sent to the server\nexport function formatTokenRuleToSend(rule) {\n  let newRule = Object.assign({}, rule);\n  try {\n\n    // Get rid of the 'id' property, already handled by MongoDB\n    if (newRule.hasOwnProperty(`id`)) {\n      delete newRule.id;\n    }\n\n    // Set some more fields for now (plan to change when we remove data redudancy)\n    newRule.token = newRule.selector;\n    newRule.tokenType = newRule.selector.split(`:`)[0];\n    newRule.tokenValue = newRule.selector.split(`:`)[1];\n    delete newRule.selector;\n\n\n    if (!newRule.hasOwnProperty(\"tokenType\") ||\n      !newRule.hasOwnProperty(\"tokenValue\") ||\n      !newRule.hasOwnProperty(\"token\") ||\n      newRule.hasOwnProperty(\"selector\")) {\n      throw new Error(`Improper token format`);\n    }\n  } catch (err) {\n    console.log(`Error formatting token:`, err);\n    return null;\n  }\n  return newRule;\n}\n\nexport function formatRegexRulesFromServer(rules) {\n  return rules.map(rule => {\n    return {        // Set the values from the server\n      id: rule._id,\n      tag: rule.tag,\n      selector: { regex: rule.regex, tokenType: rule.tokenType },\n      html: pretty(rule.html),  // This just makes the html a little nicer\n      links: rule.links,\n    }\n  }).sort(function (rule1, rule2) {   // Sort them alphabetically\n    let tagA = rule1.tag;\n    let tagB = rule2.tag;\n    if (tagA < tagB) {\n      return -1;\n    }\n    else if (tagA > tagB) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport function formatRegexRuleToSend(rule) {\n  let newRule = Object.assign({}, rule);\n  try {\n\n    // Get rid of the 'id' property, already handled by MongoDB\n    if (newRule.hasOwnProperty(`id`)) {\n      delete newRule.id;\n    }\n\n    // Set the proper fields and remove the ones we don't need\n    newRule.regex = newRule.selector.regex;\n    newRule.tokenType = newRule.selector.tokenType;\n    delete newRule.selector;\n\n    // Double check just in case\n    if (!newRule.hasOwnProperty(\"tokenType\") ||\n      !newRule.hasOwnProperty(\"regex\") ||\n      newRule.hasOwnProperty(\"selector\")) {\n      throw new Error(`Improper token format`);\n    }\n  } catch (err) {\n    console.log(`Error formatting token:`, err);\n    return null;\n  }\n  return newRule;\n}","import React from 'react';\nimport './CodeEditor.css';\n\nimport AceEditor from 'react-ace';\nimport { Range } from 'ace-builds';\nimport 'ace-builds/webpack-resolver'\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-kr_theme';\n\nexport default class CodeEditor extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.Editor = React.createRef();\n    this.markers = [];\n  }\n\n  componentDidMount() {\n    // Getting the token selected in the editor\n    let self = this;\n    let editor = this.Editor.current.editor;\n    editor.on('click', function (event, requiredUselessParam) {   // Just leave it there...\n      let pos = event.$pos;\n      let sec = editor.session;\n      let tolk = sec.getTokenAt(pos.row, pos.column);\n      self.props.onTokenSelect(tolk);  // Then send it up to the parent to be handled\n    });\n\n  }\n\n  componentDidUpdate() {\n\n    // If we have any marks, clear them out\n    if (this.markers.length > 0) {\n      this.clearEditorMarks();\n    }\n\n    // Mark the editor depening of whether it's a token or regex\n    if (this.props.ruleType === 'token') {\n      if (this.props.selector.split(':').length === 2) {\n        this.markFromTokens(this.props.selector);\n      }\n    }\n    else if (this.props.ruleType === 'regex') {\n      let { regex, tokenType } = this.props.selector;\n      this.markFromRegex(regex, tokenType);\n    }\n  }\n\n  // Resets the marks on the editor and then marks the new ones\n  markEditorFromArray = (toMark) => {\n    this.clearEditorMarks();\n    toMark.forEach(range => {\n      this.markers.push(this.Editor.current.editor.session.addMarker(range, 'ace_selection'));\n    });\n  }\n\n  // Clears the editor of all the marks\n  clearEditorMarks = () => {\n    this.markers.forEach(id => {\n      this.Editor.current.editor.session.removeMarker(id);\n    });\n    this.markers = [];\n  }\n\n  // Marks the editor based on a given token\n  markFromTokens = (externalToken) => {\n\n    // Set up the editor and the variables to save/select the token\n    let externalTokenSplit = externalToken.split(':');\n    let editor = this.Editor.current.editor;\n    let session = editor.session;\n    let lines = session.doc.$lines;\n    let toMark = [];\n\n    // For each of the lines, look through the tokens and save the ones we want to mark\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      let previousIndex = 0; // Makes sure we're getting the next token instace instead of the same one\n      session.getTokens(i).forEach((tolk, index) => {\n        if (tolk.type === externalTokenSplit[0]\n          && tolk.value === externalTokenSplit[1]) {\n\n          // Get exactly where the token is in the editor and save that position to mark later\n          let startIndex = line.indexOf(tolk.value, previousIndex);\n          toMark.push(new Range(i, startIndex, i, startIndex + tolk.value.length));\n          previousIndex = line.indexOf(tolk.value, previousIndex + 1);\n        }\n      });\n    }\n\n    // Mark all occurances of the tokens\n    this.markEditorFromArray(toMark);\n  }\n\n  // Given a regex value, marks all the locations found in the editor\n  markFromRegex = (regex, tokenType) => {\n\n    // Set up the editor and the variables to save/select the token\n    let editor = this.Editor.current.editor;\n    let session = editor.session;\n    let lines = session.doc.$lines;\n    let toMark = [];\n\n    // Go through each of the lines\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n\n      // Since the selector goes by token type, we have to get the document tokens\n      session.getTokens(i).forEach((tolk, index) => {\n        if (tolk.type === tokenType) {  // If we match the token type...\n          if (regex) {  // And we have a regex value...\n            let regexObj = new RegExp(regex, 'g');\n            if (regexObj.test(tolk.value)) {  // Check to see if the value matches our regex\n\n              // Push up the range to be marked\n              toMark.push(new Range(i, line.indexOf(tolk.value), i, line.indexOf(tolk.value) + tolk.value.length))\n            }\n          } else {\n            // Blank regex == go only by token type.\n            toMark.push(new Range(i, line.indexOf(tolk.value), i, line.indexOf(tolk.value) + tolk.value.length));\n          }\n        }\n      });\n    }\n\n    // Mark all occurances of the regex\n    this.markEditorFromArray(toMark);\n  }\n\n  render() {\n    return (\n      <div className=\"CodeEditor\">\n        <AceEditor\n          ref={this.Editor}\n          mode=\"javascript\"\n          theme=\"kr_theme\"\n          value={this.props.placeholder}\n          onChange={this.props.onEditorValueChange}\n          width={\"100%\"}\n          height={\"100%\"}\n        />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './HtmlDisplay.css';\n\nimport sanitizeHtml from 'sanitize-html';\nimport hljs from 'highlight.js/lib/highlight';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport 'highlight.js/styles/darkula.css';\nhljs.registerLanguage('javascript', javascript);\n\nexport default class HtmlDisplay extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.HtmlDisplay = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateHighlighting();\n  }\n\n  componentDidUpdate() {\n    this.updateHighlighting();\n  }\n\n  // Highlights any 'code' inside a displayed rule\n  updateHighlighting = () => {\n    if (this.HtmlDisplay.current) {\n      this.HtmlDisplay.current.querySelectorAll(`pre code`).forEach((block) => {\n        hljs.highlightBlock(block);\n      });\n    }\n  }\n\n  // Clean the html from the props\n  getHtml = () => {\n\n    // Sanitize the html and add the newlines to the \"pre code\" sections\n    let html = sanitizeHtml(this.props.value, {\n      allowedTags: sanitizeHtml.defaults.allowedTags.concat(['h1', 'h2'])\n    })\n    html = html.replace(/\\\\n/g, \"\\n\");  // Replace the new lines\n\n    this.updateHighlighting();  // Highlight code snippets\n\n    return { __html: html };\n  }\n\n  render() {\n\n    return (\n      <div className=\"HtmlDisplay\">\n        <div\n          ref={this.HtmlDisplay}\n          className=\"display\"\n          dangerouslySetInnerHTML={this.getHtml()}></div>\n      </div >\n    )\n  }\n}\n","import React from 'react';\nimport './Footer.css';\n\nimport { connect } from 'react-redux';\n\nimport CodeEditor from './CodeEditor';\nimport HtmlDisplay from './HtmlDisplay';\n\nimport {\n  updateEditorToken,\n  updateEditorValue,\n  updateStoreRule,\n  addStoreRule,\n  fetchFromServer,\n  updateAlertMessage,\n} from '../../redux/actions';\nimport store from '../../redux/store';\n\nimport * as HttpService from '../../HttpService';\nimport * as RuleFormatter from '../../RuleFormatter';\n\n// import state from '../../redux/state';\n\nclass Footer extends React.Component {\n\n  saveRule = () => {\n    this.props.saveRule();\n  }\n\n  // clearRule = () => {\n  //   this.props.clearRule();\n  // }\n\n  render() {\n    return (\n      <div className=\"Footer\">\n        <div className=\"footer-components\">\n          <CodeEditor\n            placeholder={this.props.editorValue}\n            onTokenSelect={this.props.updateEditorToken}\n            onEditorValueChange={this.props.updateEditorValue}\n            selector={this.props.selector}\n            ruleType={this.props.ruleType} />\n          <HtmlDisplay value={this.props.html} />\n        </div>\n        <div className=\"operations\">\n          <button className=\"save-button\" onClick={this.saveRule}>Save</button>\n          {/* <button className=\"clear-button\" onClick={this.clearRule}>Clear</button> */}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    html: state.currentRule.html,\n    selector: state.currentRule.selector,\n    editorValue: state.currentEditorValue,\n    ruleType: state.currentRuleType,\n  }\n}\n\nconst mapDispatchToProps = function (dispatch) {\n  return {\n    updateEditorToken: function (token) {\n      dispatch(updateEditorToken(token));\n    },\n    updateEditorValue: function (value) {\n      dispatch(updateEditorValue(value));\n    },\n    saveRule: function () {\n      let ruleType = store.getState().currentRuleType;\n      if (ruleType === 'token') {\n        saveTokenRule(dispatch);\n      }\n      else if (ruleType === 'regex') {\n        saveRegexRule(dispatch);\n      }\n    },\n  }\n}\n\nfunction saveTokenRule(dispatch) {\n  // Get all the info we need\n  let state = store.getState();\n  let id = state.currentRule.id;\n  let formattedRule = RuleFormatter.formatTokenRuleToSend(state.currentRule);\n\n  // If we have a bad rule, don't send it\n  if (!formattedRule) {\n    return;\n  }\n\n  // Set the status 'retrieving' status and make the request\n  store.dispatch(fetchFromServer());\n\n  // If the rule is new (id will we empty) then we make a new rule\n  if (id) {\n    HttpService.saveTokenRule(id, formattedRule, state.currentLanguage)\n      .then(resp => {\n        if (resp.data === `OK`) {\n          store.dispatch(updateStoreRule(state.currentRule));\n          store.dispatch(updateAlertMessage(`Rule Saved`))\n        }\n      })\n      .catch(err => store.dispatch(updateAlertMessage(err.toString())));\n  } else {\n    HttpService.saveNewTokenRule(formattedRule, state.currentLanguage)\n      .then(resp => {\n        if (resp.status === 201) {\n\n          console.log('RESP TOLK', resp.data);\n\n          // From the server, we need an ID from the new rule\n          let newRule = Object.assign({}, state.currentRule);\n          newRule.id = resp.data;\n          store.dispatch(addStoreRule(newRule));\n          store.dispatch(updateAlertMessage(`New Rule Added`));\n        }\n      })\n      .catch(err => store.dispatch(updateAlertMessage(err.toString())));\n  }\n  /* */\n\n}\n\nfunction saveRegexRule(dispatch) {\n  // Get all the info we need\n  let state = store.getState();\n  let id = state.currentRule.id;\n  let formattedRule = RuleFormatter.formatRegexRuleToSend(state.currentRule);\n\n  // If we have a bad rule, don't send it\n  if (!formattedRule) {\n    return;\n  }\n\n  // Set the status 'retrieving' status and make the request\n  store.dispatch(fetchFromServer());\n\n  if (id) {\n    HttpService.saveRegexRule(id, formattedRule, state.currentLanguage)\n      .then(resp => {\n        if (resp.data === `OK`) {\n          store.dispatch(updateStoreRule(state.currentRule));\n          store.dispatch(updateAlertMessage(`Rule Saved`))\n        }\n      })\n      .catch(err => store.dispatch(updateAlertMessage(err.toString())));\n  } else {\n    HttpService.saveNewRegexRule(formattedRule, state.currentLanguage)\n      .then(resp => {\n        if (resp.status === 201) {\n\n          console.log('RESP REGEX', resp.data);\n\n          // From the server, we need an ID from the new rule\n          let newRule = Object.assign({}, state.currentRule);\n          newRule.id = resp.data;\n          store.dispatch(addStoreRule(newRule));\n          store.dispatch(updateAlertMessage(`New Rule Added`));\n        }\n      })\n      .catch(err => store.dispatch(updateAlertMessage(err.toString())));\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import React from 'react';\nimport './Notification.css';\n\nimport store from '../../redux/store';\nimport { updateAlertMessage } from '../../redux/actions';\n\nconst DISPLAY_MESSAGE_TIME = 4000;\n\nexport default class Notification extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      msg: '',\n      style: { display: 'none' },\n    }\n  }\n\n  componentDidMount() {\n    // Whenever the state changes, check to see if there is a new message to show\n    this.subscribed = store.subscribe(() => {\n      let newMsg = store.getState().alertMessage;\n      if (newMsg) {\n\n        // Get the message and set the display\n        this.setState({\n          msg: store.getState().alertMessage,\n          style: { display: 'flex' }\n        });\n\n        // After a bit of time, close it out.\n        setTimeout(() => {\n          this.setState({ style: { display: 'none' } });\n          store.dispatch(updateAlertMessage(``))\n        }, DISPLAY_MESSAGE_TIME);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.subscribed.unsubscribe) {\n      this.subscribed.unsubscribe();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Notification\" style={this.state.style}>\n        <div className=\"center-piece\">\n          <p>{this.state.msg}</p>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './Main.css';\n\nimport Settings from './overlay/Settings'\nimport Header from './header/Header';\nimport Body from './body/Body';\nimport Footer from './footer/Footer';\nimport Notification from './overlay/Notification';\n\nimport store from '../redux/store';\n\nexport default class Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: store.getState().user\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <Settings user={this.state.user} />\n        <Header />\n        <Body />\n        <Footer />\n        <Notification />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Main from './dashboard/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
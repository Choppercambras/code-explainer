Things to do:

√ Sanatize the html input from the rules
- Link explinations in rules to other explinations
    * Have it retrieve it from the backend using a single token 'GET'
√ Set 'code snippets' for the rules.html
- Have an error message if we don't have complete code
- Have a 'rating' bar at the bottom of each explination asking if it was a good definition
    * This is just for now to get a better use of the code
- Write up the README and include instructions on how to write the rules
- Fix the 'new line' problem with the code snippits inside explinations
- Have a better transition between descriptions
- Save the users code in the 'local' storage
- Write a better card for object key/pair values instead of them just being "variables"

Things to consider:

1. No mobile version. It'll just be too hard to implement. Instead have a page that explains why
2. Useless information: "this is error code 24"
(√) 3. Parse the document first and gather all the keywords, then get them from the server. Not locally
4. Prevent user from trying to 'explain' non compilable code. Maybe in the future, have a prompt that says to the effect "This code is invalid, which might cause some errors with the explination. Do you want to try to explain it anyway?"

Extra stuff if there's time:

~ "Grammar Checker": Check spelling for common words (ex: funciton -> function) // Is this taken care of by ace code editor already?
- Get a bunch of people to use it and then start doing data collection.
√ Check if the code compiles and then show errors if it doesn't. (done by Ace)
- Have a select function that can parse a selection and give some explination what might be going on (ex. "let x = 0;" 'We're creating a variable and assigning it the value of 0')
    * This will probably need it's own database to get running. The server will likely parse the tokens and then relate them to a database that has the correct regex syntax
- Have rules reference various parts of the code entered (ex. while describing a funciton name, include the function name in the rules);
- You can link between different keywords using the token iterator till it runs into it.
- When naming the collections, have a naming convention so you can get it by concating string (Ex. if we're using javascript as our code, have the databases be called "javascriptTokensRules")
- Have it be "function begin" instead of "Curly Brace" (probably set this as regex rule instead of a token)
- Create a "simplifier" button at the top of each explination to give an even simpler explination of the code
- Have a "request" part that someone can request a specific keyword, maybe part of the "This keyword doesn't exist"
- Have a button to "execute" the code and have it simply just redirect to another site and include the code body in the header to run it there.

Rules for Tokens:
    
    The only character able to be passed into a token is '\n'
    No '\t' characters are allowed. Use 4 spaces instead
    All links are automaticlaly set to open a new tab

Random:

    Regex for a variable declaration: (?:let|var|const)\s+[a-zA-Z][0-1a-zA-Z]+
    Keywords to do:
        var
        const
        booleans (true, false)
        Strings
        dot notation (obj.x)
        console.log
        regexp
        boolean operators (&&, ||, !, ^, >, <, >=, <=)
        'document' && 'window'

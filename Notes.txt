Things to do:

- Sanatize the html input from the rules
- Link explinations in rules to other explinations 
- Set 'code snippets' for the rules.html

Things to consider:

1. No mobile version. It'll just be too hard to implement. Instead have a page that explains why
2. What should we have in the rules?
    - tag: the name/ID of the rule
    - regex: the regular expression to search for
    - token: the token generated by ace if regex is blank
    - html: what will be placed inside the modal
    - links: All the other tags to link to that have a relation to eachother
3. Useless information: "this is error code 24"
4. Parse the document first and gather all the keywords, then get them from the server. Not locally
5. Prevent user from trying to 'explain' non compilable code. Maybe in the future, have a prompt that says to the effect "This code is invalid, which might cause some errors with the explination. Do you want to try to explain it anyway?"

Extra stuff if there's time:

- "Grammar Checker": Check spelling for common words (ex: funciton -> function)
- Get a bunch of people to use it and then start doing data collection.
âˆš Check if the code compiles and then show errors if it doesn't. (done by Ace)
- Have a select function that can parse a selection and give some explination what might be going on
- Have rules reference various parts of the code entered (ex. while describing a funciton name, include the function name in the rules);

Thoughts:

What am I going to do about making a unique tag for the rule? So far it's been ${<type>:<value>}, both values being pulled from the 'token' Ace returns. Some of these tokens have duplicate types but different values, and others have unique types, but distinct values making the combination of type and value not relevant. I need to find a way to make this unique yet cover each token so we don't have duplicates, but we don't miss other values. Maybe have an extra field that will check the regex of the line that contains it, however we still need to have a unique value.
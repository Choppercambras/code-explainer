Things to do:

- Sanatize the html input from the rules
- Link explinations in rules to other explinations 
- Set 'code snippets' for the rules.html

Things to consider:

1. No mobile version. It'll just be too hard to implement. Instead have a page that explains why
2. What should we have in the rules?
    - tag: the name/ID of the rule
    - regex: the regular expression to search for
    - token: the token generated by ace if regex is blank
    - html: what will be placed inside the modal
    - links: All the other tags to link to that have a relation to eachother
3. Useless information: "this is error code 24"
4. Parse the document first and gather all the keywords, then get them from the server. Not locally
5. Prevent user from trying to 'explain' non compilable code. Maybe in the future, have a prompt that says to the effect "This code is invalid, which might cause some errors with the explination. Do you want to try to explain it anyway?"

Extra stuff if there's time:

- "Grammar Checker": Check spelling for common words (ex: funciton -> function)
- Get a bunch of people to use it and then start doing data collection.
âˆš Check if the code compiles and then show errors if it doesn't. (done by Ace)
- Have a select function that can parse a selection and give some explination what might be going on
- Have rules reference various parts of the code entered (ex. while describing a funciton name, include the function name in the rules);
- You can link between different keywords using the token iterator till it runs into it.
- When naming the collections, have a naming convention so you can get it by concating string
- Have it be "function begin" instead of "Curly Brace"
